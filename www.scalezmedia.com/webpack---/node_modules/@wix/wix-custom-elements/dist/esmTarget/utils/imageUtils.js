function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}

function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
            });
        } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
            ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
        }
    }
    return target;
}

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}

import {
    fittingTypes,
    alignTypes,
    getData
} from '@wix/image-kit';

var getImageComputedProperties = function getImageComputedProperties(imageInfo, envConsts, htmlTag) {
    var targetWidth = imageInfo.targetWidth,
        targetHeight = imageInfo.targetHeight,
        imageData = imageInfo.imageData,
        filters = imageInfo.filters,
        _imageInfo$displayMod = imageInfo.displayMode,
        displayMode = _imageInfo$displayMod === void 0 ? fittingTypes.SCALE_TO_FILL : _imageInfo$displayMod; //todo: CLNT-5323 , wixapp sildergallery proxy is generating image data without uri

    if (!targetWidth || !targetHeight || !imageData.uri) {
        return {
            uri: '',
            css: {}
        };
    }

    var width = imageData.width,
        height = imageData.height,
        crop = imageData.crop,
        name = imageData.name,
        focalPoint = imageData.focalPoint,
        upscaleMethod = imageData.upscaleMethod,
        quality = imageData.quality,
        _imageData$devicePixe = imageData.devicePixelRatio,
        devicePixelRatio = _imageData$devicePixe === void 0 ? envConsts.devicePixelRatio : _imageData$devicePixe;

    var imageOptions = _objectSpread({
        filters: filters,
        upscaleMethod: upscaleMethod
    }, quality);

    var pixelAspectRatio = getDevicePixelRatio(devicePixelRatio);

    var src = _objectSpread(_objectSpread(_objectSpread({
        id: imageData.uri,
        width: width,
        height: height
    }, crop && {
        crop: crop
    }), focalPoint && {
        focalPoint: focalPoint
    }), name && {
        name: name
    });

    var target = {
        width: targetWidth,
        height: targetHeight,
        htmlTag: htmlTag || 'img',
        pixelAspectRatio: pixelAspectRatio,
        alignment: imageInfo.alignType || alignTypes.CENTER
    };
    var imageComputedProperties = getData(displayMode, src, target, imageOptions);
    imageComputedProperties.uri = getMediaUrlByContext(imageComputedProperties.uri, envConsts.staticMediaUrl, envConsts.mediaRootUrl);
    return imageComputedProperties;
};

var getMediaUrlByContext = function getMediaUrlByContext(imageUri, staticMediaUrl, mediaRootUrl) {
    var isExternalUrl = /(^https?)|(^data)|(^blob)|(^\/\/)/.test(imageUri);

    if (isExternalUrl) {
        return imageUri;
    }

    var path = staticMediaUrl + "/";

    if (imageUri) {
        if (/^micons\//.test(imageUri)) {
            path = mediaRootUrl;
        } else if (/[^.]+$/.exec(imageUri)[0] === 'ico') {
            //if the image is an icon then it's taken from a slightly different place
            path = path.replace('media', 'ficons');
        }
    }

    return path + imageUri;
};

var getDevicePixelRatio = function getDevicePixelRatio(devicePixelRatio) {
    //we should be able to force devicePixelRatio from url by using the query param -
    var queryParams = window.location.search.split('&').map(function(query) {
        return query.split('=');
    });
    var devicePixelRatioQueryParam = queryParams.find(function(query) {
        return query[0].toLowerCase().includes('devicepixelratio');
    });
    var devicePixelRatioValueForceFromUrl = devicePixelRatioQueryParam ? Number(devicePixelRatioQueryParam[1]) : null;
    return devicePixelRatioValueForceFromUrl || devicePixelRatio || 1;
};

var getImageSrc = function getImageSrc(imageNode, isSvgImage) {
    return imageNode.getAttribute(isSvgImage ? 'xlink:href' : 'src');
};

function getMaskBBox(svgNode) {
    if (svgNode) {
        var type = svgNode.dataset.type;

        if (type && type !== 'ugc') {
            var dataBBox = svgNode.dataset.bbox;

            if (!dataBBox) {
                var _svgNode$getBBox = svgNode.getBBox(),
                    x = _svgNode$getBBox.x,
                    y = _svgNode$getBBox.y,
                    width = _svgNode$getBBox.width,
                    height = _svgNode$getBBox.height;

                return x + " " + y + " " + width + " " + height;
            }
        }
    }

    return null;
} //todo: temp experiments for measuring purposes, should be removed after test results


function shouldStopImageLoad(services) {
    return services.isExperimentOpen('specs.thunderbolt.tb_stop_client_images') || services.isExperimentOpen('specs.thunderbolt.final_force_webp') || services.isExperimentOpen('specs.thunderbolt.final_force_no_webp');
}

export {
    shouldStopImageLoad,
    getImageComputedProperties,
    getImageSrc,
    getMaskBBox
};
//# sourceMappingURL=imageUtils.js.map
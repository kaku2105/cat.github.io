var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import {
    getDynamicPatternsSchema
} from './get-dynamic-patterns-schema';
export function convertComponentsItemPayload(_a) {
    var _b = _a.componentsItemPayload,
        componentsItemPayload = _b === void 0 ? [] : _b,
        context = _a.context;
    var componentContext = {};
    var componentsTags = [];
    for (var _i = 0, componentsItemPayload_1 = componentsItemPayload; _i < componentsItemPayload_1.length; _i++) {
        var _c = componentsItemPayload_1[_i],
            itemData = _c.itemData,
            patternBlob = _c.patternBlob,
            adapter = _c.adapter;
        var itemDataWithContext = __assign(__assign({}, itemData), {
            context: context
        });
        var data = adapter.getData(itemDataWithContext);
        var dynamicPatternsSchema = getDynamicPatternsSchema(adapter, itemDataWithContext);
        componentsTags = __spreadArrays(componentsTags, [patternBlob, dynamicPatternsSchema]);
        componentContext = __assign(__assign({}, componentContext), data);
    }
    return {
        componentsTags: componentsTags,
        componentContext: componentContext,
    };
}
import {
    proxy
} from 'comlink';
var proxyCallbackMarker = '__proxyCallbackId__wixSDK__';
export var serializeAllMethodsIn = function(sdk) {
    return wrapMethodsWithProxy(sdk, function(originalMethod) {
        return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var callbacks = {};
            var argsNoCallbacks = extractCallbacks(args, callbacks);
            return originalMethod(proxy(callbacks), argsNoCallbacks);
        };
    });
};
export var deserializeAllMethodsIn = function(api) {
    return wrapMethodsWithProxy(api, function(originalMethod) {
        return function(callbacks, args) {
            var argsWithCallbacks = insertCallbacks(args, callbacks);
            return originalMethod.apply(void 0, argsWithCallbacks);
        };
    });
};
/**
 * Recursively extract functions from data into callbacks object, so data can be structured clone. (serialize)
 */
var extractCallbacks = function(data, callbacks) {
    var _a;
    if (isFunction(data)) {
        var proxyCallbackId = uniqueId();
        callbacks[proxyCallbackId] = function(innerCallbacks, argsAsArray) {
            var argsWithCallbacks = insertCallbacks(argsAsArray, innerCallbacks);
            return data.apply(void 0, argsWithCallbacks);
        };
        return _a = {}, _a[proxyCallbackMarker] = proxyCallbackId, _a;
    }
    if (Array.isArray(data)) {
        return data.map(function(i) {
            return extractCallbacks(i, callbacks);
        });
    }
    if (isObject(data)) {
        return mapObjectValues(data, function(i) {
            return extractCallbacks(i, callbacks);
        });
    }
    return data;
};
/**
 * Recursively insert functions from callbacks object into data (deserialize)
 */
var insertCallbacks = function(data, callbacks) {
    if (Array.isArray(data)) {
        return data.map(function(i) {
            return insertCallbacks(i, callbacks);
        });
    }
    if (isObject(data) && data.hasOwnProperty(proxyCallbackMarker)) {
        var callbackId_1 = data[proxyCallbackMarker];
        // passing args in spread syntax to comlink proxy generates problem when transpiling to old JS version
        // so pass it as array and handle it on the deserialization level:
        return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            // handle callbacks that might be passed as props from the other side
            var innerCallbacks = {};
            var argsNoCallbacks = extractCallbacks(args, innerCallbacks);
            return callbacks[callbackId_1](proxy(innerCallbacks), argsNoCallbacks);
        };
    }
    if (isObject(data)) {
        return mapObjectValues(data, function(i) {
            return insertCallbacks(i, callbacks);
        });
    }
    return data;
};
var wrapMethodsWithProxy = function(obj, callback) {
    return new Proxy(obj, {
        get: function(target, prop) {
            return callback(target[prop]);
        },
    });
};
var isObject = function(val) {
    return val && typeof val === 'object';
};
var isFunction = function(val) {
    return typeof val === 'function';
};
var mapObjectValues = function(obj, callback) {
    var mapEntries = function(_a) {
        var key = _a[0],
            value = _a[1];
        return [key, callback(value)];
    };
    return Object.fromEntries(Object.entries(obj).map(mapEntries));
};
var uniqueId = (function() {
    var counter = 0;
    return function() {
        return ++counter;
    };
})();
//# sourceMappingURL=serializationHandler.js.map
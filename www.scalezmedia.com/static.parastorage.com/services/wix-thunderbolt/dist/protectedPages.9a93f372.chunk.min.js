(self.webpackJsonp__wix_thunderbolt_app = self.webpackJsonp__wix_thunderbolt_app || []).push([
    [66], {
        88454: function(e, t, a) {
            "use strict";
            a.r(t), a.d(t, {
                page: function() {
                    return O
                },
                site: function() {
                    return w
                }
            });
            var s, n = a(56510),
                r = a(25259),
                i = a(18358);
            ! function(e) {
                e.SM = "SM", e.Pass = "PASS", e.NONE = "NONE"
            }(s || (s = {}));
            const o = (0, n.ff)([(0, n.t6)(r.jC, i.u), (0, n.t6)(r.R9, i.u), (0, n.t6)(r.Wf, i.u)], ((e, t, a) => ({
                async handle(n) {
                    if (n.pageJsonFileName) return n;
                    const r = n.pageId,
                        {
                            pagesMap: i,
                            loginAndNavigate: o
                        } = a.get();
                    if (i[r]) return Object.assign(Object.assign({}, n), {
                        pageJsonFileName: i[r]
                    });
                    const u = (a => {
                        const n = e.pagesSecurity[a];
                        return n && n.requireLogin ? s.SM : t.passwordProtected[a] || n && n.passwordDigest ? s.Pass : s.NONE
                    })(r);
                    return u === s.NONE && ((e, t) => {
                        throw new Error(`we do not have authentication info for protected page ${e} page security: ${t}`)
                    })(r, e.pagesSecurity[r]), o(n, u), null
                }
            })));
            var u = a(75471),
                c = a(6504),
                g = a(50997),
                p = a(58382),
                d = a(2922),
                P = a(21980),
                l = a(24888);
            const f = (0, n.ff)([(0, n.t6)(r.Wf, i.u), (0, n.t6)(r.R9, i.u), (0, n.t6)(r.jC, i.u), u.F0, d.jj, (0, n.jt)(g.n9), (0, n.jt)(p.RC), P.EE, l.O], ((e, {
                publicPageIds: t
            }, {
                customNoPermissionsPageUrl: a,
                customNoPermissionsPageId: n
            }, r, i, o, u, g, p) => {
                const d = async (e, t) => e === s.SM ? (async () => {
                        let e;
                        if (o)
                            if (p["specs.thunderbolt.newAuthorizedPagesFlow"]) {
                                if (e = await o.requestAuthorizedPages(), e.success) return {
                                    authorizedPagesMap: e.pages
                                }
                            } else if (e = await o.requestAuthentication({}), e.success) return {
                            authorizedPagesMap: await o.authorizeMemberPagesByToken(e.token)
                        };
                        return {
                            authorizedPagesMap: {},
                            authenticationResult: e
                        }
                    })() : (async e => u ? u.promptPasswordDialog(e) : {
                        authorizedPagesMap: {}
                    })(t),
                    P = async (e, t, s = !1) => {
                        if (a && s) return r.navigate(`${a}?appSectionParams={"restrictedPageId":"${e}"}`);
                        if (o && "SM" === t) {
                            const e = () => {
                                i.isLandingOnProtectedPage() && r.navigate("./")
                            };
                            return o.showNoPermissionsToPageDialog(e), !1
                        }
                        return !!i.isLandingOnProtectedPage() && r.navigate("./")
                    },
                    l = async (a, s) => {
                        const o = a.pageId;
                        try {
                            const {
                                authorizedPagesMap: u,
                                authenticationResult: g
                            } = await d(s, o);
                            if (e.update((e => Object.assign(Object.assign({}, e), {
                                    pagesMap: Object.assign(e.pagesMap, u)
                                }))), (null == g ? void 0 : g.reason) === c.$9.CANCELED) return !!i.isLandingOnProtectedPage() && r.navigate("./");
                            if (u[o]) return r.navigate(a.parsedUrl.href); {
                                const e = t.includes(n),
                                    a = !!u[n];
                                return P(o, s, e || a)
                            }
                        } catch (e) {
                            return g.captureError(e, {
                                tags: {
                                    feature: "protectedPage"
                                }
                            }), P(o, s)
                        }
                    };
                return e.update((() => ({
                    loginAndNavigate: l,
                    pagesMap: {}
                }))), {
                    appWillMount: async () => {}
                }
            }));
            var h = a(13487),
                M = a(46450);
            const b = (0, n.ff)([(0, n.t6)(r.Wf, i.u), g.n9], ((e, t) => ({
                    getTpaHandlers: () => ({
                        authorizeMemberPages: async () => {
                            const a = await t.authorizeMemberPagesByCookie();
                            e.update((e => Object.assign(Object.assign({}, e), {
                                pagesMap: Object.assign(Object.assign({}, e.pagesMap), a)
                            })))
                        }
                    })
                }))),
                w = e => {
                    e(u.BD.Protected).to(o), e(h.j.AppWillMountHandler).to(f)
                },
                O = e => {
                    e(M.go).to(b)
                }
        }
    }
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/protectedPages.9a93f372.chunk.min.js.map
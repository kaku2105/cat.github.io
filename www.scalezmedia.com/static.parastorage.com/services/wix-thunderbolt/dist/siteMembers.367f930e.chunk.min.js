(self.webpackJsonp__wix_thunderbolt_app = self.webpackJsonp__wix_thunderbolt_app || []).push([
    [4522, 7212, 9030], {
        54021: function(e, t, i) {
            "use strict";
            i.r(t), i.d(t, {
                AUTH_RESULT_REASON: function() {
                    return D.$9
                },
                BIEvents: function() {
                    return k
                },
                INTERACTIONS: function() {
                    return D.SE
                },
                PrivacyStatus: function() {
                    return D.iY
                },
                SiteMembersApiSymbol: function() {
                    return E.n9
                },
                isLoginAcceptableError: function() {
                    return I.Y2
                },
                isSignupAcceptableError: function() {
                    return I.fJ
                },
                memberDetailsFromDTO: function() {
                    return I.Ky
                },
                page: function() {
                    return B
                },
                site: function() {
                    return F
                }
            });
            var o = i(56510),
                a = i(25259),
                n = i(14439),
                s = i(21980),
                r = i(55437),
                l = i(32114),
                c = i(53891),
                u = i(54164),
                d = i(2922),
                g = i(24888),
                m = i(89534);
            var p = i(52192),
                h = i(61885),
                b = i(31619),
                v = i(75471),
                S = i(51978),
                C = i(19378),
                w = i(51968),
                y = i(18037),
                D = i(6504),
                f = i(63805),
                E = i(50997);
            class P {
                constructor(e, t, i, o) {
                    this.propsStore = e, this.structureApi = t, this.siteScrollBlocker = i, this.browserWindow = o
                }
                async displayDialog(e, t, i, o = {}) {
                    const a = async () => {
                            (0, p.yF)(this.browserWindow) || (this.activeElementBeforeShowDialog = this.browserWindow.document.activeElement);
                            const o = (0, y.uniqueId)(E.rj);
                            this.propsStore.update({
                                [o]: Object.assign(Object.assign({}, t), i)
                            }), (0, f.U)(), await this.structureApi.addComponentToDynamicStructure(o, {
                                componentType: e,
                                components: []
                            }), this.currentCompId && (this.structureApi.removeComponentFromDynamicStructure(this.currentCompId), this.siteScrollBlocker.setSiteScrollingBlocked(!1, this.currentCompId)), this.siteScrollBlocker.setSiteScrollingBlocked(!0, o), this.currentCompId = o
                        },
                        {
                            shouldWaitForAppDidMount: n,
                            registerToAppDidMount: s
                        } = o;
                    n && s ? s(a) : await a()
                }
                hideDialog() {
                    var e;
                    this.currentCompId && (this.structureApi.removeComponentFromDynamicStructure(this.currentCompId), this.siteScrollBlocker.setSiteScrollingBlocked(!1, this.currentCompId), (0, f.i)()), this.currentCompId = void 0, (0, p.yF)(this.browserWindow) || (null === (e = this.activeElementBeforeShowDialog) || void 0 === e || e.focus(), this.activeElementBeforeShowDialog = null)
                }
            }
            var I = i(13039),
                T = i(56334);
            const k = ({
                    sessionManager: e,
                    businessLogger: t,
                    wixBiSession: i,
                    viewMode: o,
                    language: a
                }) => {
                    const n = (t, n) => ({
                        biToken: i.msId,
                        context: t,
                        ts: L(i),
                        viewmode: o,
                        visitor_id: e.getVisitorId(),
                        site_member_id: e.getSiteMemberId(),
                        vsi: i.viewerSessionId,
                        site_settings_lng: a.siteLanguage,
                        browser_lng: a.userLanguage,
                        lng_mismatch: a.siteLanguage !== a.userLanguage,
                        layout: n
                    });
                    return {
                        loginOrSignUpDialogLoaded: (e, i = "fullscreen") => {
                            t.logger.log(Object.assign({
                                src: 5,
                                evid: 658
                            }, n(e, i)), {
                                endpoint: "site-members"
                            })
                        },
                        closingDialog: (e, i = "fullscreen") => {
                            t.logger.log(Object.assign({
                                src: 5,
                                evid: 602,
                                form_type: "default"
                            }, n(e, i)), {
                                endpoint: "site-members"
                            })
                        },
                        emailAuthSubmitClicked: (e, i) => {
                            t.logger.log(Object.assign({
                                src: 5,
                                evid: 603,
                                form_type: "default"
                            }, n(e, i)), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersFeatureLoaded: () => {
                            t.logger.log(Object.assign({
                                src: 5,
                                evid: 698
                            }, n()), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersSdkFeatureLoaded: () => {
                            t.logger.log(Object.assign({
                                src: 5,
                                evid: 699
                            }, n()), {
                                endpoint: "site-members"
                            })
                        }
                    }
                },
                L = e => {
                    const t = e.initialTimestamp || 0;
                    return Date.now() - t
                },
                A = {
                    isCloseable: !0,
                    returnPages: !1
                };
            class R {
                constructor(e, t) {
                    this.shouldRunCustomPopupCloseCallback = !0, this.popups = e, this.onReset = t, this.config = A
                }
                async openPopupPage(e, t) {
                    var i;
                    const o = this.shouldRunCustomPopupCloseCallback;
                    this.preventCustomPopupCloseCallback(), await (null === (i = this.popups) || void 0 === i ? void 0 : i.openPopupPage(e, (() => {
                        this.shouldRunCustomPopupCloseCallback && (this.rejectAuthenticationRequest(), t && t())
                    }))), this.shouldRunCustomPopupCloseCallback = o
                }
                preventCustomPopupCloseCallback() {
                    this.shouldRunCustomPopupCloseCallback = !1
                }
                allowCustomPopupCloseCallback() {
                    this.shouldRunCustomPopupCloseCallback = !0
                }
                assignRequestAuthenticationRejection(e) {
                    this.requestAuthenticationRejectInstance = this.requestAuthenticationRejectInstance || e
                }
                assignRequestAuthenticationResolveInstance(e) {
                    this.requestAuthenticationResolveInstance = this.requestAuthenticationResolveInstance || e
                }
                assignRequestAuthenticationPromise(e, t) {
                    this.requestAuthenticationRejectInstance = this.requestAuthenticationRejectInstance || t, this.requestAuthenticationResolveInstance = this.requestAuthenticationResolveInstance || e
                }
                rejectAuthenticationRequest() {
                    this.requestAuthenticationRejectInstance && (this.requestAuthenticationRejectInstance(D.$9.CANCELED), this.reset())
                }
                resolveAuthenticationRequest(e) {
                    this.requestAuthenticationRejectInstance && (this.requestAuthenticationResolveInstance(e), this.reset())
                }
                setConfig({
                    isCloseable: e = !0,
                    returnPages: t = !1
                }) {
                    this.config = {
                        isCloseable: e,
                        returnPages: t
                    }
                }
                reset() {
                    var e;
                    null === (e = this.onReset) || void 0 === e || e.call(this), this.requestAuthenticationRejectInstance = void 0, this.requestAuthenticationResolveInstance = void 0, this.config = A
                }
            }
            const O = (e, t, i) => {
                    document.cookie = `${e}=;max-age=0`, document.cookie = `${e}=;max-age=0;path=${t}`, document.cookie = `${e}=;domain=${i};max-age=0`, document.cookie = `${e}=;domain=${i};max-age=0;path=${t}`
                },
                _ = (0, o.ff)([(0, o.t6)(a.R9, E.u2), (0, o.t6)(a.jC, E.u2), (0, o.t6)(a.Wf, E.u2), n.U, s.EE, s.Zr, b.X, r.xP, r.QZ, s.bk, s.ZQ, v.F0, S.x, l.v, v.Iz, c.$, u.s, (0, o.jt)(C.r_), (0, o.jt)(w.I), d.jj, g.O, m.C, (0, o.jt)(T.I)], ((e, t, i, o, a, n, s, r, l, c, u, d, g, m, b, v, S, C, w = {
                    trackEvent: () => 0
                }, f, E, T, L) => {
                    var A;
                    const _ = (() => {
                            const e = {},
                                t = {
                                    setItemCssOverrides: (t, i, o) => {
                                        const a = o.document.querySelector(i);
                                        a && (Object.assign(a.style, t), e[i] = (e[i] || []).concat(Object.keys(t)))
                                    },
                                    clearItemCssOverrides: (t, i) => {
                                        const o = e[t];
                                        if (!o) return;
                                        const a = new Set([...o]),
                                            n = i.document.querySelector(t);
                                        n && (a.forEach((e => n.style.removeProperty(e))), "" === n.getAttribute("style") && n.removeAttribute("style")), delete e[t]
                                    },
                                    clearAllItemsCssOverrides: i => {
                                        Object.keys(e).forEach((e => {
                                            t.clearItemCssOverrides(e, i)
                                        }))
                                    }
                                };
                            return t
                        })(),
                        {
                            shouldLoadInvisibleCaptcha: M,
                            isCommunityInstalled: N,
                            collectionExposure: U,
                            protectedHomepage: $,
                            smSessionCookie: q,
                            memberInfoAppId: j,
                            smcollectionId: F,
                            isTemplate: B
                        } = e;
                    let {
                        sm_efCookie: x
                    } = e;
                    const W = "WixInternal" === U,
                        V = s.getUserSession(),
                        G = s.getAppInstanceByAppDefId("22bef345-3c5b-4c18-b782-74d4085112ff"),
                        H = () => (0, I.OP)(s),
                        {
                            smSettings: z,
                            tpaApplicationIds: K,
                            policyLinks: Y
                        } = t,
                        J = j && K[j],
                        {
                            siteRevision: Q,
                            metaSiteId: X,
                            siteId: Z,
                            externalBaseUrl: ee
                        } = n.site,
                        te = n.requestUrl,
                        ie = n.viewMode,
                        oe = -1 !== D.F0.findIndex((e => {
                            var t, i;
                            return null === (i = null === (t = null == u ? void 0 : u.navigator) || void 0 === t ? void 0 : t.userAgent) || void 0 === i ? void 0 : i.includes(e)
                        })),
                        ae = !oe,
                        ne = !oe,
                        se = `/_api/wix-sm-webapp/tokens/verify/${X}/${Z}`,
                        re = `${ee.replace(/\/$/,"")}/api/wix-sm/v1/authorize/${Z}/pages`,
                        le = `/_api/wix-sm-webapp/tokens/logout/${X}`,
                        ce = `/_api/wix-sm-webapp/member/changePasswordWithMailToken?metaSiteId=${X}&collectionId=${F}`,
                        ue = `/_api/wix-sm-webapp/social/token/handle?metaSiteId=${X}&collectionId=${F}`,
                        de = z.smFirstDialogLogin ? "login" : "signup",
                        {
                            socialLoginFacebookEnabled: ge,
                            socialLoginGoogleEnabled: me,
                            termsOfUse: pe,
                            privacyPolicy: he,
                            codeOfConduct: be,
                            customSignUpPageId: ve,
                            customSignInPageId: Se
                        } = z,
                        Ce = null === (A = z.joinCommunityCheckedByDefault) || void 0 === A || A;
                    let {
                        smToken: we
                    } = e, ye = {}, De = q, fe = null, Ee = !1;
                    const Pe = e => {
                            fe = e
                        },
                        Ie = () => ({
                            registerToAppDidMount: Pe,
                            shouldWaitForAppDidMount: !Ee
                        }),
                        Te = {},
                        ke = {},
                        Le = e => Promise.all(Object.entries(e).map((async ([e, t]) => {
                            try {
                                if ("$$$timeout$$$" === await Promise.race([t(), (0, I._v)(3e3).then((() => "$$$timeout$$$"))])) throw new Error(`callback ${e} timed out`)
                            } catch (e) {
                                a.captureError(e, {
                                    tags: {
                                        feature: "site-members"
                                    }
                                })
                            }
                        }))),
                        Ae = k({
                            sessionManager: s,
                            businessLogger: v,
                            wixBiSession: S,
                            viewMode: null == ie ? void 0 : ie.toUpperCase(),
                            language: c
                        });
                    Ae.siteMembersFeatureLoaded();
                    const Re = {},
                        Oe = (0, I.Qn)(o, {
                            credentials: "same-origin",
                            headers: {
                                accept: "application/json",
                                "x-wix-site-revision": `${Q}`,
                                "x-wix-client-artifact-id": "thunderbolt"
                            }
                        }, n.requestUrl),
                        _e = ((e, t, i, o) => new P(e, t, i, o))(r, l, g, u),
                        Me = new R(C, (() => {
                            M && E["specs.thunderbolt.shouldLoadInvisibleCaptcha"] && _.setItemCssOverrides({
                                visibility: "hidden"
                            }, ".grecaptcha-badge", u)
                        })),
                        Ne = null == L ? void 0 : L.getBsi(),
                        Ue = Ne ? Ne.split("|")[0] : "00000000-0000-0000-0000-000000000000",
                        $e = {
                            appDidMount() {
                                fe && fe(), Ee = !0
                            },
                            async login(e, t, i, o = !1) {
                                w.trackEvent({
                                    eventName: "CustomEvent",
                                    params: {
                                        eventCategory: "Site members",
                                        eventAction: "Log in Submit",
                                        eventLabel: "Wix"
                                    }
                                });
                                try {
                                    const a = await $e.performLogin(e, t, i),
                                        n = await $e.handleLoginResponse(a, o);
                                    return w.trackEvent({
                                        eventName: "CustomEvent",
                                        params: {
                                            eventCategory: "Site members",
                                            eventAction: "Log in Success",
                                            eventLabel: "Wix"
                                        }
                                    }), n
                                } catch (e) {
                                    throw w.trackEvent({
                                        eventName: "CustomEvent",
                                        params: {
                                            eventCategory: "Site members",
                                            eventAction: "Log in Failure",
                                            eventLabel: "Wix"
                                        }
                                    }), e
                                }
                            },
                            async performLogin(e, t, i) {
                                var o;
                                const a = await Oe("/_api/wix-sm-webapp/v1/auth/login", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                        authorization: G || ""
                                    },
                                    body: JSON.stringify({
                                        email: e,
                                        password: t,
                                        recaptchaToken: null == i ? void 0 : i.recaptchaToken,
                                        invisibleRecaptchaToken: null == i ? void 0 : i.invisibleRecaptchaToken
                                    })
                                });
                                return {
                                    member: a.member,
                                    token: null === (o = null == a ? void 0 : a.session) || void 0 === o ? void 0 : o.token
                                }
                            },
                            async handleOauthToken(e, t, i, o, n = !1) {
                                const r = s.getVisitorId();
                                a.interactionStarted(D.SE.SOCIAL_APP_LOGIN), w.trackEvent({
                                    eventName: "CustomEvent",
                                    params: {
                                        eventCategory: "Site members",
                                        eventAction: "Log in Submit",
                                        eventLabel: t
                                    }
                                });
                                try {
                                    const {
                                        payload: s
                                    } = await Oe(ue, {
                                        method: "POST",
                                        headers: {
                                            "Content-Type": "application/json"
                                        },
                                        body: JSON.stringify({
                                            svSession: V,
                                            visitorId: r,
                                            token: e,
                                            provider: t,
                                            mode: i,
                                            lang: c.userLanguage,
                                            privacyStatus: o
                                        })
                                    });
                                    let l, u;
                                    a.interactionEnded(D.SE.SOCIAL_APP_LOGIN), s.smSession && (u = s.smSession.siteMemberDto, l = s.smSession.sessionToken), u = s.siteMemberDto;
                                    const d = (0, I.Ky)(u),
                                        g = await $e.handleLoginResponse({
                                            member: d,
                                            token: l
                                        }, n);
                                    return w.trackEvent({
                                        eventName: "CustomEvent",
                                        params: {
                                            eventCategory: "Site members",
                                            eventAction: "Log in Success",
                                            eventLabel: t
                                        }
                                    }), g
                                } catch (e) {
                                    throw w.trackEvent({
                                        eventName: "CustomEvent",
                                        params: {
                                            eventCategory: "Site members",
                                            eventAction: "Log in Failure",
                                            eventLabel: t
                                        }
                                    }), e
                                }
                            },
                            async handleSocialLoginResponse(e, t, i = !1) {
                                let o, n;
                                a.interactionStarted(D.SE.SOCIAL_APP_LOGIN), a.interactionEnded(D.SE.SOCIAL_APP_LOGIN), w.trackEvent({
                                    eventName: "CustomEvent",
                                    params: {
                                        eventCategory: "Site members",
                                        eventAction: "Log in Submit",
                                        eventLabel: t
                                    }
                                }), e.smSession && (n = e.smSession.siteMemberDto, o = e.smSession.sessionToken), n = e.siteMemberDto;
                                const s = (0, I.Ky)(n),
                                    r = await $e.handleLoginResponse({
                                        member: s,
                                        token: o
                                    }, i);
                                return w.trackEvent({
                                    eventName: "CustomEvent",
                                    params: {
                                        eventCategory: "Site members",
                                        eventAction: "Log in Success",
                                        eventLabel: t
                                    }
                                }), r
                            },
                            async handleLoginResponse({
                                token: e,
                                member: t
                            }, i = !1) {
                                const o = t.emailVerified;
                                if (e || o || "ACTIVE" !== t.status) {
                                    if (e) {
                                        const o = await $e.applySessionToken(e, t, i);
                                        return Object.assign({
                                            sessionToken: e,
                                            member: t
                                        }, i ? {
                                            pages: o
                                        } : {})
                                    }
                                    return $e.showAdminApprovalDialog(t.loginEmail, "login")
                                }
                                return $e.showConfirmationEmailDialog(t.id)
                            },
                            async promptLogin(e, t, i) {
                                var o, a, n, s;
                                void 0 === e && (e = {}), void 0 === t && (t = null === (a = null === (o = Me.config) || void 0 === o ? void 0 : o.isCloseable) || void 0 === a || a), void 0 === i && (i = null !== (s = null === (n = Me.config) || void 0 === n ? void 0 : n.returnPages) && void 0 !== s && s);
                                const {
                                    mode: r,
                                    modal: l
                                } = e, d = null != r ? r : de, g = l ? "popup" : "fullscreen";
                                if (B) {
                                    const e = await m();
                                    return await $e.showNotificationDialog(e("siteMembersTranslations", "siteMembersTranslations_TEMPLATE_NOTIFICATION_TITLE", "Demo Mode"), e("siteMembersTranslations", "siteMembersTranslations_TEMPLATE_NOTIFICATION_MESSAGE", "To make this template yours, start editing it."), e("siteMembersTranslations", "SMContainer_OK", "OK")), Promise.reject(D.$9.CANCELED)
                                }
                                return E["specs.thunderbolt.shouldLoadGoogleSdkEarly"] && ((0, I.cW)(u, c.userLanguage, M && E["specs.thunderbolt.shouldLoadInvisibleCaptcha"] ? D.mz : "explicit"), M && E["specs.thunderbolt.shouldLoadInvisibleCaptcha"] && setTimeout((() => {
                                    _.setItemCssOverrides({
                                        visibility: "visible",
                                        "z-index": "var(--portals-z-index)"
                                    }, ".grecaptcha-badge", u)
                                }), 1e3)), "login" === d ? $e.showLoginDialog(t, g, i) : $e.showSignUpDialog(t, g, i)
                            },
                            promptForgotPassword: (e = !0) => new Promise(((t, i) => {
                                Me.assignRequestAuthenticationPromise(t, i);
                                const o = {
                                        isCloseable: e,
                                        directionByLanguage: c.directionByLanguage
                                    },
                                    a = {
                                        onCloseDialogCallback() {
                                            Ae.closingDialog("RequestResetPassword"), _e.hideDialog(), Me.rejectAuthenticationRequest()
                                        },
                                        onSubmitCallback: e => $e.sendForgotPasswordMail(e).then((async () => {
                                            const e = await m(),
                                                i = () => {
                                                    Me.resolveAuthenticationRequest(), t()
                                                };
                                            $e.showNotificationDialog(e("siteMembersTranslations", "siteMembersTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE", "Please Check Your Email"), e("siteMembersTranslations", "siteMembersTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT", "We\u2019ve emailed you a link to reset your password."), e("siteMembersTranslations", "siteMembersTranslations_Reset_Password_OK", "Got It"), i, i)
                                        }))
                                    },
                                    n = E["specs.thunderbolt.smModalsShouldWaitForAppDidMount"] ? Ie() : {};
                                _e.displayDialog("RequestPasswordResetDialog", o, a, n)
                            })),
                            async requestAuthentication(e = {}) {
                                if (De) return {
                                    success: !0,
                                    token: De,
                                    reason: D.$9.ALREADY_LOGGED_IN
                                };
                                try {
                                    const t = !$,
                                        {
                                            sessionToken: i
                                        } = await $e.promptLogin(e, t);
                                    return {
                                        success: !0,
                                        token: i,
                                        reason: D.$9.SUCCESS
                                    }
                                } catch (e) {
                                    return {
                                        success: !1,
                                        reason: e
                                    }
                                }
                            },
                            async requestAuthorizedPages(e = {}) {
                                if (we) {
                                    return {
                                        success: !0,
                                        pages: await $e.authorizeMemberPagesBySignedInstance(we)
                                    }
                                }
                                try {
                                    const t = !$;
                                    Me.setConfig({
                                        isCloseable: t,
                                        returnPages: !0
                                    });
                                    const i = await $e.promptLogin(e, t, !0);
                                    return Me.reset(), {
                                        success: !0,
                                        pages: i.pages
                                    }
                                } catch (e) {
                                    return {
                                        success: !1,
                                        reason: e
                                    }
                                }
                            },
                            async applySessionToken(e, t, i = !1) {
                                a.interactionStarted(D.SE.VERIFY_TOKEN);
                                const {
                                    payload: o
                                } = await Oe(se, {
                                    method: "POST",
                                    body: `token=${e}`
                                });
                                if (a.interactionEnded(D.SE.VERIFY_TOKEN), await s.loadNewSession({
                                        reason: "memberLogin"
                                    }), we = s.getSmToken(), De = e, ye = null != t ? t : await $e.getMemberDetails(), await Le(Te), i) return o.pages
                            },
                            async authorizeMemberPagesByCookie() {
                                const e = (0, p.yF)(u) ? {
                                        headers: {
                                            cookie: `smSession=${q}`
                                        }
                                    } : void 0,
                                    {
                                        authorizedPages: t
                                    } = await Oe(re, e);
                                return t
                            },
                            async authorizeMemberPagesByToken(e) {
                                if (e === q) return this.authorizeMemberPagesByCookie();
                                const {
                                    payload: t
                                } = await Oe(se, {
                                    method: "POST",
                                    body: `token=${e}`
                                }), {
                                    pages: i
                                } = t;
                                return i
                            },
                            async authorizeMemberPagesBySignedInstance(e) {
                                const t = {
                                        headers: {
                                            authorization: e
                                        }
                                    },
                                    {
                                        authorizedPages: i
                                    } = await Oe(re, t);
                                return i
                            },
                            async getMemberDetails(e = !1) {
                                if (ye.id && !e) return ye;
                                if (we) {
                                    const t = `/_api/wix-sm-webapp/member/${we}?collectionId=${F}&metaSiteId=${X}`,
                                        {
                                            payload: i
                                        } = await Oe(t);
                                    return ye = (0, I.Ky)(i), e && await Promise.all(Object.values(Re).map((async e => {
                                        try {
                                            await e()
                                        } catch (e) {
                                            a.captureError(e, {
                                                tags: {
                                                    feature: "site-members"
                                                }
                                            })
                                        }
                                    }))), ye
                                }
                                return null
                            },
                            async register(e, t, i, o, n, s, r, l, c) {
                                s = null != s && s;
                                try {
                                    a.interactionStarted(D.SE.CODE_SIGNUP), w.trackEvent({
                                        eventName: "CustomEvent",
                                        params: {
                                            eventCategory: "Site members",
                                            eventAction: "Sign up Submit",
                                            eventLabel: "Wix"
                                        }
                                    });
                                    const u = {
                                            email: e,
                                            password: t,
                                            profilePrivacyStatus: o,
                                            contactInfo: (0, I.t1)(i || {}),
                                            defaultFlow: n,
                                            recaptchaToken: r,
                                            invisibleRecaptchaToken: l,
                                            emailVerification: c
                                        },
                                        {
                                            member: d,
                                            session: g
                                        } = await Oe("/_api/wix-sm-webapp/v1/auth/signup", {
                                            method: "POST",
                                            headers: {
                                                "Content-Type": "application/json",
                                                authorization: G || ""
                                            },
                                            body: JSON.stringify(u)
                                        }),
                                        m = d.emailVerified,
                                        p = null == g ? void 0 : g.token,
                                        h = "ACTIVE" === (null == d ? void 0 : d.status) ? "ACTIVE" : "PENDING";
                                    if (p || m || "ACTIVE" !== d.status) {
                                        if (n && "APPLICANT" === (null == d ? void 0 : d.status) || !p) return a.interactionEnded(D.SE.CODE_SIGNUP), $e.showAdminApprovalDialog(e, "signup"); {
                                            const e = await $e.applySessionToken(p, d, s);
                                            return a.interactionEnded(D.SE.CODE_SIGNUP), w.trackEvent({
                                                eventName: "CustomEvent",
                                                params: {
                                                    eventCategory: "Site members",
                                                    eventAction: "Sign up Success",
                                                    eventLabel: "Wix"
                                                }
                                            }), w.trackEvent({
                                                eventName: "CompleteRegistration",
                                                params: {
                                                    origin: "Site members",
                                                    method: "Wix"
                                                }
                                            }), Object.assign({
                                                member: d,
                                                status: h,
                                                sessionToken: p
                                            }, s && e ? {
                                                pages: e
                                            } : {})
                                        }
                                    }
                                    return a.interactionEnded(D.SE.CODE_SIGNUP), $e.showConfirmationEmailDialog(d.id)
                                } catch (s) {
                                    if (w.trackEvent({
                                            eventName: "CustomEvent",
                                            params: {
                                                eventCategory: "Site members",
                                                eventAction: "Sign up Failure",
                                                eventLabel: "Wix"
                                            }
                                        }), (0, I.yQ)(s)) {
                                        a.interactionStarted(D.SE.VERIFICATION_CODE);
                                        const {
                                            details: c
                                        } = s, {
                                            applicationError: u
                                        } = c, {
                                            data: d
                                        } = u, g = {
                                            email: e,
                                            password: t,
                                            profilePrivacyStatus: o,
                                            contactInfo: i,
                                            defaultFlow: n,
                                            recaptchaToken: r,
                                            invisibleRecaptchaToken: l,
                                            emailVerification: {
                                                verificationId: null == d ? void 0 : d.verificationId,
                                                otp: ""
                                            }
                                        };
                                        return $e.showVerificationCodeDialog(g)
                                    }
                                    throw (0, I.fJ)(s) && a.interactionEnded(D.SE.CODE_SIGNUP), s
                                }
                            },
                            async sendForgotPasswordMail(e) {
                                a.interactionStarted(D.SE.RESET_PASSWORD);
                                const t = c.userLanguage,
                                    i = encodeURIComponent(te),
                                    o = encodeURIComponent(e);
                                await Oe("/_api/wix-sm-webapp/member/sendForgotPasswordMail", {
                                    method: "POST",
                                    body: `returnUrl=${i}&collectionId=${F}&metaSiteId=${X}&lang=${t}&email=${o}`
                                }), a.interactionEnded(D.SE.RESET_PASSWORD)
                            },
                            async sendSetPasswordEmail(e, t) {
                                const i = await Oe("/_api/wix-sm-webapp/members/v1/auth/members/send-set-password-email", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                        authorization: G || ""
                                    },
                                    body: JSON.stringify(Object.assign({
                                        email: e
                                    }, (null == t ? void 0 : t.hideIgnoreMessage) ? {
                                        hideIgnoreMessage: t.hideIgnoreMessage
                                    } : {}))
                                });
                                return !!(null == i ? void 0 : i.accepted)
                            },
                            async changePassword(e, t) {
                                const i = encodeURIComponent(e);
                                await Oe(ce, {
                                    method: "POST",
                                    body: `newPassword=${i}&forgotPasswordToken=${t}`
                                })
                            },
                            async resendEmailVerification(e) {
                                await Oe(`/_api/wix-sm-webapp/tokens/email/resend/${e}`)
                            },
                            async logout(e) {
                                if (we) {
                                    if (await Oe(le, {
                                            method: "POST"
                                        }).catch((() => {
                                            w.trackEvent({
                                                eventName: "CustomEvent",
                                                params: {
                                                    eventCategory: "Site members",
                                                    eventAction: "Log out failed"
                                                }
                                            })
                                        })), await Le(ke), e) {
                                        const t = `./${e.replace(/^\//,"")}`;
                                        await d.navigate(t)
                                    }(0, p.yF)(u) || u.document.location.reload()
                                }
                            },
                            registerToUserLogin: (e, t = (0, y.uniqueId)("callback")) => (Te[t] = e, t),
                            unRegisterToUserLogin(e) {
                                delete Te[e]
                            },
                            registerToMemberLogout(e) {
                                const t = (0, y.uniqueId)("logout_callback");
                                return ke[t] = e, t
                            },
                            unRegisterToMemberLogout(e) {
                                delete ke[e]
                            },
                            registerToMemberDetailsRefresh(e) {
                                const t = (0, y.uniqueId)("mdrcb");
                                return Re[t] = e, t
                            },
                            unRegisterToMemberDetailsRefresh(e) {
                                delete Re[e]
                            },
                            async showWelcomeDialog(e = !0) {
                                const t = {
                                        isCloseable: e
                                    },
                                    i = b.getParsedUrl(),
                                    o = {
                                        onCloseDialogCallback() {
                                            Ae.closingDialog("WelcomeDialog");
                                            const e = new URL(n.requestUrl).hostname,
                                                t = 0 === e.indexOf("www") ? e.substr(3) : e;
                                            O("sm_ef", "/", t), x = "", _e.hideDialog(), d.navigate(i.href)
                                        },
                                        onSubmitCallback() {
                                            const e = new URL(n.requestUrl).hostname,
                                                t = 0 === e.indexOf("www") ? e.substr(3) : e;
                                            O("sm_ef", "/", t), x = "", _e.hideDialog(), J && d.navigate("./account/my-account"), d.navigate(i.href)
                                        }
                                    };
                                a.interactionStarted(D.SE.WELCOME_DIALOG), a.interactionEnded(D.SE.WELCOME_DIALOG), _e.displayDialog("WelcomeDialog", t, o)
                            },
                            async showNoPermissionsToPageDialog(e) {
                                const t = {
                                    onCloseDialogCallback() {
                                        _e.hideDialog(), e && e()
                                    },
                                    onSwitchAccountLinkClick() {
                                        $e.logout()
                                    }
                                };
                                _e.displayDialog("NoPermissionsToPageDialog", {}, t)
                            },
                            async showResetPasswordDialog(e) {
                                const t = {
                                        isCloseable: !0,
                                        isTermsOfUseNeeded: !(!(null == pe ? void 0 : pe.enabled) || !Y.termsOfUse),
                                        isPrivacyPolicyNeeded: !(!(null == he ? void 0 : he.enabled) || !Y.privacyPolicy),
                                        termsOfUseLink: Y.termsOfUse,
                                        privacyPolicyLink: Y.privacyPolicy,
                                        directionByLanguage: c.directionByLanguage
                                    },
                                    i = {
                                        onCloseDialogCallback() {
                                            Ae.closingDialog("ResetPasswordDialog");
                                            const e = b.getParsedUrl();
                                            e.searchParams.delete("forgotPasswordToken"), e.searchParams.delete("forgotPasswordLang"), b.pushUrlState(e), _e.hideDialog(), d.navigate(e.href)
                                        },
                                        async onSubmitCallback(i) {
                                            const o = await m();
                                            try {
                                                await $e.changePassword(i, e), $e.showNotificationDialog(o("siteMembersTranslations", "siteMembersTranslations_Reset_Password_Sucess_Title", "Your password has been changed."), "", o("siteMembersTranslations", "SMContainer_OK", "OK"), (async () => {
                                                    const e = b.getParsedUrl();
                                                    e.searchParams.delete("forgotPasswordToken"), e.searchParams.delete("forgotPasswordLang"), b.pushUrlState(e), await $e.showLoginDialog(), d.navigate(e.href)
                                                }))
                                            } catch (e) {
                                                if (-19972 !== e) throw e;
                                                $e.showNotificationDialog(o("siteMembersTranslations", "siteMembersTranslations_PASSWORD_HAS_EXPIRED_TITLE", "Your link to create a new password has expired"), o("siteMembersTranslations", "siteMembersTranslations_PASSWORD_HAS_EXPIRED_TEXT", "To continue, resend a new link to your email."), o("siteMembersTranslations", "siteMembersTranslations_PASSWORD_HAS_EXPIRED_OK", "Resend Link"), (() => $e.promptForgotPassword(t.isCloseable).then((() => {
                                                    const e = b.getParsedUrl();
                                                    d.navigate(e.href)
                                                }))))
                                            }
                                        }
                                    };
                                _e.displayDialog("ResetPasswordDialog", t, i, Ie())
                            },
                            showLoginDialog: async (e = !0, t = "fullscreen", i = !1) => Se && (null == C ? void 0 : C.isPopupPage(Se)) ? $e.showCustomAuthenticationDialog(Se, i) : new Promise((async (o, n) => {
                                Me.assignRequestAuthenticationPromise(o, n);
                                const s = {
                                        bsi: Ue,
                                        displayMode: t,
                                        language: c.userLanguage,
                                        directionByLanguage: c.directionByLanguage,
                                        isCloseable: e,
                                        smCollectionId: F,
                                        svSession: V,
                                        biVisitorId: H(),
                                        metaSiteId: X,
                                        isSocialLoginGoogleEnabled: me,
                                        isSocialLoginFacebookEnabled: !W && ge,
                                        isEmailLoginEnabled: !W,
                                        shouldForceCaptchaVerification: "Enabled" === E["specs.ShouldForceCaptchaVerificationOnLoginSpec"],
                                        isSocialAuthSupported: ae,
                                        shouldUseInvisibleCaptcha: E["specs.thunderbolt.useInvisibleCaptcha"]
                                    },
                                    r = {
                                        onCloseDialogCallback() {
                                            _e.hideDialog(), Ae.closingDialog("MemberLoginDialog", t), Me.rejectAuthenticationRequest()
                                        },
                                        submit: (e, n, s) => (a.interactionStarted(D.SE.DEFAULT_LOGIN), Ae.emailAuthSubmitClicked("MemberLoginDialog", t), $e.login(e, n, s, i).then((e => {
                                            a.interactionEnded(D.SE.DEFAULT_LOGIN), _e.hideDialog(), o(e)
                                        })).catch((e => {
                                            throw (0, I.Y2)(e) && a.interactionEnded(D.SE.DEFAULT_LOGIN), e
                                        }))),
                                        onForgetYourPasswordClick() {
                                            $e.promptForgotPassword(e)
                                        },
                                        onSwitchDialogLinkClick() {
                                            $e.showSignUpDialog(e, t, i).then(o, (() => {
                                                Me.rejectAuthenticationRequest()
                                            }))
                                        },
                                        onTokenMessage(e, t, a = !1) {
                                            let n;
                                            return N && (n = a ? "PUBLIC" : "PRIVATE"), $e.handleOauthToken(e, t, "memberLoginDialog", n, i).then((e => {
                                                _e.hideDialog(), o(e)
                                            }))
                                        },
                                        onBackendSocialLogin: (e, t) => $e.handleSocialLoginResponse(e, t, i).then((e => {
                                            _e.hideDialog(), o(e)
                                        })),
                                        getHostReadyPayload: () => ({
                                            visitorId: H(),
                                            svSession: V
                                        }),
                                        openCaptcha: (0, h.yT)({
                                            captcha: T,
                                            userLanguage: c.userLanguage
                                        })
                                    };
                                Ae.loginOrSignUpDialogLoaded("MemberLoginDialog", t), await _e.displayDialog("MemberLoginDialog", s, r, Ie()), $e.closeCustomAuthenticationDialogs(!0)
                            })),
                            async showSignUpDialog(e = !0, t = "fullscreen", i = !1) {
                                if (ve && (null == C ? void 0 : C.isPopupPage(ve))) return $e.showCustomAuthenticationDialog(ve, i);
                                const o = "Enabled" !== E["specs.ShouldPassCaptchaVerificationOnSignupSpec"] && "Enabled" === E["specs.ShouldForceCaptchaVerificationOnSignupSpec"];
                                return new Promise((async (n, s) => {
                                    Me.assignRequestAuthenticationPromise(n, s);
                                    const r = {
                                            bsi: Ue,
                                            displayMode: t,
                                            language: c.userLanguage,
                                            directionByLanguage: c.directionByLanguage,
                                            isCloseable: e,
                                            smCollectionId: F,
                                            biVisitorId: H(),
                                            svSession: V,
                                            metaSiteId: X,
                                            isSocialLoginGoogleEnabled: me,
                                            isSocialLoginFacebookEnabled: !W && ge,
                                            isSocialAuthSupported: ae,
                                            isEmailLoginEnabled: !W,
                                            isCommunityInstalled: N,
                                            joinCommunityCheckedByDefault: Ce,
                                            isTermsOfUseNeeded: !(!(null == pe ? void 0 : pe.enabled) || !Y.termsOfUse),
                                            isPrivacyPolicyNeeded: !(!(null == he ? void 0 : he.enabled) || !Y.privacyPolicy),
                                            isCodeOfConductNeeded: !(!(null == be ? void 0 : be.enabled) || !Y.codeOfConduct),
                                            shouldUseInvisibleCaptcha: E["specs.thunderbolt.useInvisibleCaptcha"],
                                            shouldForceCaptchaVerification: o,
                                            termsOfUseLink: Y.termsOfUse,
                                            privacyPolicyLink: Y.privacyPolicy,
                                            codeOfConductLink: Y.codeOfConduct
                                        },
                                        l = {
                                            onCloseDialogCallback() {
                                                _e.hideDialog(), Ae.closingDialog("SignUpDialog", t), Me.rejectAuthenticationRequest()
                                            },
                                            submit(e, o, s) {
                                                let r;
                                                if (N) {
                                                    r = ("boolean" == typeof s ? s : s.isCommunityChecked) ? D.iY.PUBLIC : D.iY.PRIVATE
                                                }
                                                const l = "boolean" == typeof s || null == s ? void 0 : s.recaptchaToken,
                                                    c = "boolean" == typeof s || null == s ? void 0 : s.invisibleRecaptchaToken;
                                                return a.interactionStarted(D.SE.DEFAULT_SIGNUP), Ae.emailAuthSubmitClicked("SignUpDialog", t), $e.register(e, o, void 0, r, void 0, i, l, c).then((e => {
                                                    a.interactionEnded(D.SE.DEFAULT_SIGNUP);
                                                    const {
                                                        member: t,
                                                        sessionToken: o,
                                                        pages: s
                                                    } = e;
                                                    o && (_e.hideDialog(), n(Object.assign({
                                                        member: t,
                                                        sessionToken: o
                                                    }, i ? {
                                                        pages: s
                                                    } : {})))
                                                })).catch((e => {
                                                    throw (0, I.fJ)(e) && a.interactionEnded(D.SE.DEFAULT_SIGNUP), e
                                                }))
                                            },
                                            onSwitchDialogLinkClick() {
                                                $e.showLoginDialog(e, t, i).then(n, (() => {
                                                    Me.rejectAuthenticationRequest()
                                                }))
                                            },
                                            onTokenMessage(e, t, o = !1) {
                                                let a;
                                                return N && (a = o ? "PUBLIC" : "PRIVATE"), $e.handleOauthToken(e, t, "memberLoginDialog", a, i).then((e => {
                                                    _e.hideDialog(), n(e)
                                                }))
                                            },
                                            onBackendSocialLogin: (e, t) => $e.handleSocialLoginResponse(e, t, i).then((e => {
                                                _e.hideDialog(), n(e)
                                            })),
                                            getHostReadyPayload: () => ({
                                                visitorId: H(),
                                                svSession: V
                                            }),
                                            openCaptcha: (0, h.yT)({
                                                captcha: T,
                                                userLanguage: c.userLanguage
                                            })
                                        };
                                    Ae.loginOrSignUpDialogLoaded("SignUpDialog", t), await _e.displayDialog("SignUpDialog", r, l, Ie()), $e.closeCustomAuthenticationDialogs(!0)
                                }))
                            },
                            async hideAuthDialog() {
                                console.warn("hideAuthDialog is not supported")
                            },
                            async showNotificationDialog(e, t, i, o = (() => 0), a = (() => 0)) {
                                const n = {
                                        isCloseable: !0,
                                        title: e,
                                        description: t,
                                        okButtonText: i
                                    },
                                    s = {
                                        onCloseDialogCallback() {
                                            Ae.closingDialog("NotificationDialog"), _e.hideDialog(), a()
                                        },
                                        onOkButtonClick() {
                                            _e.hideDialog(), o()
                                        }
                                    };
                                await _e.displayDialog("NotificationDialog", n, s)
                            },
                            async showConfirmationEmailDialog(e, t = !0) {
                                if (E["specs.thunderbolt.rejectApprovalNeededAuthenticationRequests"]) return new Promise(((i, o) => {
                                    const a = {
                                            isCloseable: !0,
                                            isSignUp: t
                                        },
                                        n = {
                                            onCloseDialogCallback() {
                                                Ae.closingDialog("ConfirmationEmailDialog"), _e.hideDialog(), Me.rejectAuthenticationRequest(), o(D.$9.CANCELED)
                                            },
                                            async onResendConfirmationEmail() {
                                                await $e.resendEmailVerification(e), await $e.showConfirmationEmailDialog(e, !1).catch(o)
                                            }
                                        };
                                    _e.displayDialog("ConfirmationEmailDialog", a, n)
                                })); {
                                    const i = {
                                            isCloseable: !0,
                                            isSignUp: t
                                        },
                                        o = {
                                            onCloseDialogCallback() {
                                                Ae.closingDialog("ConfirmationEmailDialog"), _e.hideDialog()
                                            },
                                            async onResendConfirmationEmail() {
                                                await $e.resendEmailVerification(e), await $e.showConfirmationEmailDialog(e, !1)
                                            }
                                        };
                                    return _e.displayDialog("ConfirmationEmailDialog", i, o).then(I.Y_)
                                }
                            },
                            async showAdminApprovalDialog(e, t) {
                                const i = await m();
                                return E["specs.thunderbolt.rejectApprovalNeededAuthenticationRequests"] ? new Promise(((o, a) => {
                                    const n = () => {
                                        Me.rejectAuthenticationRequest(), a(D.$9.CANCELED)
                                    };
                                    $e.showNotificationDialog("", `${i("siteMembersTranslations","SMApply_Success1",`Success! Your member ${t} request has been sent and is awaiting approval.`)} ${i("siteMembersTranslations","SMApply_Success2","The site administrator will notify you via email ({0}) once your request has been approved.")}`.replace("{0}", e), i("siteMembersTranslations", "SMContainer_OK", "OK"), n, n)
                                })) : $e.showNotificationDialog("", `${i("siteMembersTranslations","SMApply_Success1",`Success! Your member ${t} request has been sent and is awaiting approval.`)} ${i("siteMembersTranslations","SMApply_Success2","The site administrator will notify you via email ({0}) once your request has been approved.")}`.replace("{0}", e), i("siteMembersTranslations", "SMContainer_OK", "OK")).then(I.Y_)
                            },
                            async showCustomAuthenticationDialog(e, t = !1) {
                                if (!C) throw new Error("popup unavailable");
                                return new Promise((async (i, o) => {
                                    Me.assignRequestAuthenticationPromise(i, o);
                                    const a = $e.registerToUserLogin((async () => {
                                        Me.resolveAuthenticationRequest(Object.assign({
                                            member: ye,
                                            sessionToken: De
                                        }, t ? {
                                            pages: await $e.authorizeMemberPagesBySignedInstance(we)
                                        } : {})), $e.unRegisterToUserLogin(a), C.getCurrentPopupId() === e && C.closePopupPage()
                                    }), "customAuthCbId");
                                    await Me.openPopupPage(e, (() => {
                                        $e.unRegisterToUserLogin(a)
                                    })), _e.hideDialog()
                                }))
                            },
                            async closeCustomAuthenticationDialogs(e = !1) {
                                const t = null == C ? void 0 : C.getCurrentPopupId();
                                t && [ve, Se].includes(t) && (e && Me.preventCustomPopupCloseCallback(), await C.closePopupPage(), Me.allowCustomPopupCloseCallback())
                            },
                            getForgotPasswordToken: () => new URL((0, p.yF)(u) ? n.requestUrl : location.href).searchParams.get("forgotPasswordToken"),
                            shouldDisplayWelcomeDialog: () => x && J,
                            showVerificationCodeDialog: async e => new Promise(((t, i) => {
                                var o, n;
                                Me.assignRequestAuthenticationPromise(t, i);
                                const s = null == e ? void 0 : e.email,
                                    r = {
                                        language: c.userLanguage,
                                        directionByLanguage: c.directionByLanguage,
                                        isCloseable: null === (n = null === (o = Me.config) || void 0 === o ? void 0 : o.isCloseable) || void 0 === n || n,
                                        displayMode: "customPopup",
                                        email: s
                                    },
                                    l = {
                                        onResendVerificationCodeEmail: () => $e.register(s, e.password, e.contactInfo, e.profilePrivacyStatus, e.defaultFlow, e.returnPages, "", e.invisibleRecaptchaToken, e.emailVerification),
                                        onCloseDialogCallback() {
                                            _e.hideDialog(), Ae.closingDialog("VerificationCode"), Me.rejectAuthenticationRequest(), i(D.$9.CANCELED)
                                        },
                                        onSubmitCallback(o) {
                                            var n;
                                            const r = {
                                                verificationId: (null === (n = null == e ? void 0 : e.emailVerification) || void 0 === n ? void 0 : n.verificationId) || "",
                                                otp: o || ""
                                            };
                                            return $e.register(s, e.password, e.contactInfo, e.profilePrivacyStatus, e.defaultFlow, e.returnPages, "", e.invisibleRecaptchaToken, r).then((e => {
                                                a.interactionEnded(D.SE.VERIFICATION_CODE), t(e)
                                            })).catch((e => {
                                                (0, I.fJ)(e) && a.interactionEnded(D.SE.VERIFICATION_CODE), i(e)
                                            }))
                                        }
                                    };
                                _e.displayDialog("VerificationCodeDialog", r, l)
                            })),
                            appWillMount() {
                                switch (new URL(n.requestUrl).searchParams.get("showDialog")) {
                                    case "MemberLoginDialog":
                                        $e.showLoginDialog();
                                        break;
                                    case "SignUpDialog":
                                        $e.showSignUpDialog();
                                        break;
                                    case "RequestPasswordResetDialog":
                                        $e.promptForgotPassword();
                                        break;
                                    case "ResetPasswordDialog":
                                        $e.showResetPasswordDialog("faketoken");
                                        break;
                                    case "WelcomeDialog":
                                        $e.showWelcomeDialog();
                                        break;
                                    case "NoPermissionsToPageDialog":
                                        $e.showNoPermissionsToPageDialog();
                                        break;
                                    case "NotificationDialog":
                                        $e.showNotificationDialog("title", "description", "ok");
                                        break;
                                    case "ConfirmationEmailDialog":
                                        $e.showConfirmationEmailDialog("fakemember");
                                        break;
                                    case "VerificationCodeDialog":
                                        $e.showVerificationCodeDialog({
                                            email: "testEmail@test.com",
                                            password: "",
                                            profilePrivacyStatus: "PUBLIC",
                                            returnPages: !1,
                                            defaultFlow: !1,
                                            recaptchaToken: "",
                                            invisibleRecaptchaToken: "false"
                                        })
                                }
                            },
                            pageWillUnmount({
                                pageId: e
                            }) {
                                [ve, Se].includes(e) || _e.hideDialog()
                            },
                            getSocialAuthComponentProps: () => (0, I.IO)({
                                config: e,
                                viewerModel: n,
                                sessionManager: s,
                                bsiManager: L,
                                handleOauthToken: $e.handleOauthToken,
                                handleSocialLoginResponse: $e.handleSocialLoginResponse,
                                isSocialAuthSupported: ne,
                                captcha: T,
                                userLanguage: c.userLanguage
                            })
                        };
                    return i.update((() => ({
                        shouldShowRenderingBlockingDialogs: () => !(!$e.getForgotPasswordToken() && !$e.shouldDisplayWelcomeDialog()),
                        showRenderingBlockingDialogs: () => {
                            const e = $e.getForgotPasswordToken();
                            return e ? $e.showResetPasswordDialog(e) : $e.shouldDisplayWelcomeDialog() ? $e.showWelcomeDialog() : void 0
                        }
                    }))), $e
                }));
            var M = i(13487),
                N = i(46450),
                U = i(11986);
            const $ = (0, o.ff)([E.n9], (e => ({
                    getTpaHandlers() {
                        const t = async (t, i, o) => {
                                var a, n, s;
                                const r = await e.getMemberDetails();
                                return r ? (null === (a = o.appClientSpecMapData) || void 0 === a ? void 0 : a.isWixTPA) ? {
                                    attributes: {
                                        firstName: null !== (n = r.firstName) && void 0 !== n ? n : "",
                                        lastName: null !== (s = r.lastName) && void 0 !== s ? s : "",
                                        privacyStatus: r.profilePrivacyStatus
                                    },
                                    name: r.memberName,
                                    email: r.loginEmail,
                                    id: r.id,
                                    owner: r.owner,
                                    status: r.status
                                } : {
                                    id: r.id,
                                    owner: r.owner,
                                    status: r.status
                                } : null
                            },
                            i = async (t, i = {}) => {
                                var o, a;
                                const {
                                    member: n
                                } = await e.promptLogin({
                                    mode: i.mode,
                                    modal: i.modal
                                });
                                return {
                                    attributes: {
                                        firstName: null !== (o = n.firstName) && void 0 !== o ? o : "",
                                        lastName: null !== (a = n.lastName) && void 0 !== a ? a : "",
                                        privacyStatus: n.profilePrivacyStatus
                                    },
                                    name: n.memberName,
                                    email: n.loginEmail,
                                    id: n.id,
                                    owner: n.owner,
                                    status: n.status
                                }
                            };
                        return {
                            currentMember: t,
                            smCurrentMember: t,
                            logOutCurrentMember: (0, U.u)(["site"], ((t, i) => {
                                e.logout(null == i ? void 0 : i.url)
                            })),
                            requestLogin: (0, U.u)(["site"], i),
                            smRequestLogin: (0, U.u)(["site"], i)
                        }
                    }
                }))),
                q = (0, o.ff)([E.n9, (0, o.t6)(a.$e, E.u2), r.xP], ((e, {
                    componentIds: t
                }, i) => ({
                    name: "site-members-components",
                    pageWillMount() {
                        const o = t.reduce(((t, i) => {
                            const o = e.getSocialAuthComponentProps();
                            return Object.assign(Object.assign({}, t), {
                                [i]: o
                            })
                        }), {});
                        i.update(o)
                    }
                }))),
                j = (0, o.ff)([(0, o.t6)(a.Wf, E.u2)], (e => ({
                    handle: async t => {
                        const {
                            shouldShowRenderingBlockingDialogs: i,
                            showRenderingBlockingDialogs: o
                        } = e.get();
                        return i() ? (o(), null) : t
                    }
                }))),
                F = e => {
                    e(E.n9, M.j.AppWillMountHandler, M.j.AppDidMountHandler).to(_), e(v.BD.BlockingDialogs).to(j)
                },
                B = e => {
                    e(N.go).to($), e(M.j.PageWillMountHandler).to(q), e(M.j.PageWillUnmountHandler).to((0, o.ff)([E.n9], (e => ({
                        pageWillUnmount: t => e.pageWillUnmount(t)
                    }))))
                }
        },
        61885: function(e, t, i) {
            "use strict";
            i.d(t, {
                aG: function() {
                    return n
                },
                yT: function() {
                    return s
                },
                O1: function() {
                    return l
                },
                NU: function() {
                    return c
                }
            });
            const o = "LOGIN",
                a = "SIGNUP",
                n = ({
                    experiments: e,
                    openCaptchaDialog: t
                }) => (i, n) => {
                    const s = "Enabled" !== e["specs.ShouldPassCaptchaVerificationOnSignupSpec"] && "Enabled" === e["specs.ShouldForceCaptchaVerificationOnSignupSpec"] && i === a,
                        l = "Enabled" === e["specs.ShouldForceCaptchaVerificationOnLoginSpec"] && i === o,
                        c = s || l,
                        u = async e => {
                            if (void 0 === e && c) return e = await t(), u(e);
                            try {
                                return await n(e)
                            } catch (i) {
                                if (r(i) && (e = await t().catch((() => {
                                        throw i
                                    })) || void 0)) return u(e);
                                throw i
                            }
                        };
                    return u()
                },
                s = ({
                    captcha: e,
                    userLanguage: t
                }) => () => e ? new Promise(((i, o) => {
                    e.close(), e.open({
                        onVerified: t => {
                            e.close(), i(t)
                        },
                        onClose: () => {
                            e.close(), o()
                        },
                        language: t
                    })
                })) : Promise.resolve(""),
                r = e => {
                    var t, i, o, a;
                    const n = (null === (t = null == e ? void 0 : e.details) || void 0 === t ? void 0 : t.errorcode) || (null === (i = null == e ? void 0 : e.details) || void 0 === i ? void 0 : i.errorCode) || (null === (a = null === (o = null == e ? void 0 : e.details) || void 0 === o ? void 0 : o.applicationError) || void 0 === a ? void 0 : a.code);
                    return c.includes(n)
                },
                l = {
                    SM_CAPTCHA_REQUIRED: "-19971",
                    SM_CAPTCHA_INVALID: "-19970",
                    REQUEST_THROTTLED: "-19959"
                },
                c = [l.SM_CAPTCHA_REQUIRED, l.SM_CAPTCHA_INVALID, l.REQUEST_THROTTLED]
        },
        89534: function(e, t, i) {
            "use strict";
            i.d(t, {
                C: function() {
                    return o
                },
                t: function() {
                    return a
                }
            });
            const o = Symbol("CaptchaApi"),
                a = "CAPTCHA_DIALOG_ROOT_COMP"
        }
    }
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/siteMembers.367f930e.chunk.min.js.map
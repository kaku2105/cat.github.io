var __spreadArrays = (this && this.__spreadArrays) || function() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import {
    shouldRenderPanelSchema
} from './utils/should-render-panel-schema';
import {
    resolvePanelSchemas
} from './utils/resolve-panel-schemas';
export var resolveStructuredData = function(tags, context) {
    if (tags === void 0) {
        tags = [];
    }
    if (context === void 0) {
        context = {};
    }
    var schemasSetInPanels = {};
    return __spreadArrays(tags.reduce(function(resolvedTags, tag) {
        var _a;
        var isPanelsSchema = (_a = tag === null || tag === void 0 ? void 0 : tag.meta) === null || _a === void 0 ? void 0 : _a.schemaType;
        if (isPanelsSchema) {
            if (shouldRenderPanelSchema(tag, context)) {
                schemasSetInPanels = resolvePanelSchemas(schemasSetInPanels, tag);
            }
            return resolvedTags;
        }
        return __spreadArrays(resolvedTags, [tag]);
    }, []), Object.values(schemasSetInPanels));
};
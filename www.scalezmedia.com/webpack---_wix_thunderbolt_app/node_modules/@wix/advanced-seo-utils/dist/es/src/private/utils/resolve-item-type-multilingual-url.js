import {
    experimentEnabled
} from '../adapters/experimentEnabled';
import {
    CONTEXT_PROPS
} from '../types/ContextProps';
import {
    isMultilingualType
} from '../types/MultilingualTypes';
import {
    getRawValue
} from './get';
var getPrimaryLanguage = function(languages) {
    if (languages === void 0) {
        languages = [];
    }
    return languages.filter(function(lang) {
        return lang.isPrimaryLanguage;
    });
};
export var resolveItemTypeMultilingualUrl = function(itemType, item, url) {
    if (url === void 0) {
        url = '';
    }
    var context = getRawValue(item, 'context');
    if (!experimentEnabled('specs.seo.UseMultilingualFilter', context) ||
        getRawValue(context, CONTEXT_PROPS.CURR_LANG_IS_ORIGINAL)) {
        return url;
    }
    if (!isMultilingualType(itemType)) {
        var primaryLanguage = getPrimaryLanguage(getRawValue(context, CONTEXT_PROPS.SITE_LANGUAGES));
        return (primaryLanguage === null || primaryLanguage === void 0 ? void 0 : primaryLanguage.url) || url;
    }
    // Check if current url include param
    if (getRawValue(context, CONTEXT_PROPS.CURR_LANG_RESOLUTION_METHOD) === 'QueryParam') {
        var langCode = getRawValue(context, CONTEXT_PROPS.CURR_LANG_CODE);
        var urlObject = new URL(url);
        urlObject.searchParams.set('lang', langCode);
        return decodeURI(urlObject.toString());
    } else {
        return url;
    }
};